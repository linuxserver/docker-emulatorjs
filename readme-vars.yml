---

# project information
project_name: emulatorjs
project_url: "https://github.com/linuxserver/emulatorjs"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/emulatorjs-logo.png"
project_blurb: |
  [{{ project_name|capitalize }}]({{ project_url }}) - In browser web based emulation portable to nearly any device for many retro consoles. A mix of emulators is used between Libretro and EmulatorJS.
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - {arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_vols: true
param_volumes:
  - {vol_path: "/config", vol_host_path: "/path/to/config", desc: "Path to store user profiles"}
  - {vol_path: "/data", vol_host_path: "/path/to/data", desc: "Path to store roms/artwork"}
param_usage_include_ports: true
param_ports:
  - {external_port: "3000", internal_port: "3000", port_desc: "Rom/artwork management interface, used to generate/manage config files and download artwork"}
  - {external_port: "80", internal_port: "80", port_desc: "Emulation frontend containing static web files used to browse and launch games"}
param_usage_include_env: true
param_env_vars:
  - {env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London"}
# optional variables
opt_param_usage_include_ports: true
opt_param_ports:
  - {external_port: "4001", internal_port: "4001", port_desc: "IPFS peering port, if you want to participate in the P2P network to distribute frontend artwork please forward this to the Internet"}
opt_param_usage_include_env: true
opt_param_env_vars:
  - {env_var: "SUBFOLDER", env_value: "/", desc: "Specify a subfolder for reverse proxies IE '/FOLDER/'"}
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  The Backend can be accessed at:

  * http://yourhost:3000/

  The first thing you will need to do is click to download the default art/configs from this interface, this will setup a skeleton directory in your `/data` mount. From there add roms to the respective `roms` directories and follow the on screen instructions to add them to your web frontend running on port 80.

  **I understand there may be some confusion as to project naming, but when this project (linuxserver/emulatorjs) started it was meant to be a simple frontend for self hosting folks to use the at the time deobfuscated code of [https://www.emulatorjs.com/](https://www.emulatorjs.com/) that [ethanaobrien](https://github.com/ethanaobrien) was working on. Since then [EmulatorJS](https://github.com/EmulatorJS/EmulatorJS) has evolved into it's own amazing project based on [Libretro](https://github.com/libretro) cores that have been highly optimized to function for web. This project mostly contains custom built libretro cores found [here](https://github.com/linuxserver/libretro-cores). So in general despite the naming of this project and the logo this is just a docker container with a web based backend for generating a useable self hosted emulation website and is in no way affiliated with [EmulatorJS](https://github.com/EmulatorJS/EmulatorJS).**

  **This container (outside of the profile functionality) only generates a static set of files that can be hosted on any web provider even object storage. Everything runs in the client's browser and there are no dependencies on this container. To extract/copy this website it is at the path `/emulatorjs/frontend` inside the container. If you are happy with the catalouge you have created and no longer want to run stuff like the IPFS backend or want to upload these files to some other hosting provider you can simply copy the contents of that directory and kill off this container. This container can also be started without IPFS once you collection is set using the environment variable `-e DISABLE_IPFS=true`.**

  ### Read Only Rom Mounts

  **Mounting in existing rom directories Read Only can be achieved by using a special root path `/roms`, For example for NES:**

  `-v /path/to/nes/roms:/roms/nes:ro`

  The folder names for systems are:
  * 3do
  * arcade
  * atari2600
  * atari5200
  * atari7800
  * colecovision
  * doom
  * gb
  * gba
  * gbc
  * jaguar
  * lynx
  * msx
  * n64
  * nds
  * nes
  * ngp
  * odyssey2
  * pce
  * psx
  * sega32x
  * segaCD
  * segaGG
  * segaMD
  * segaMS
  * segaSaturn
  * segaSG
  * snes
  * vb
  * vectrex
  * ws

  ### Compatible and Tested Browsers 

  **Chromium Based Browsers**- This is the golden standard whether desktop or on mobile (Android) Chrome/Chromium/Brave/Edge should always be used. They have the best performance when it comes to WebAssembly.

  **Firefox**- This will work (at reduced performance though) without tested controller support.

  **Safari iOS**- Safari performs well and has controller support though in recent updates the amount of ram available to a single tab (~265MB) makes it impossible to run n64 emulation or anything CD based. Do not use [WKWebView](https://developer.apple.com/documentation/webkit/wkwebview) applications like Chrome or Firefox on iOS they will not be detected properly in the client software. Your best bet in iOS is to add the web page to your home screen from Safari and launch from there to get a full screen interface.

  **Edge Xbox Series X/S**- This also performs well and was the basis of this project though recent console updates have knocked the ram available to a single tab from 1GB to 128MB making it impossible to run CD based games or n64.

  ### Navigation Basics

  **Retroarch Menu**- The Retroarch menu can be accessed using F1 on keyboard, start/select/R1/L1 at the same time on controller, or pressing the button in the top left in touch mode.

  **Fast Scrolling**- Items in the menu can be scrolled by letter by using PgUp/PgDn on the keyboard or the R1/L1 buttons on controller. In touch mode scrolling can be sped up by touching and dragging (while holding) either up or down.

  **For Xbox users please click the select button a couple times after launching a game to ensure the B button does not trigger a "back" action in the browser. (official name "view button" it is the two small squares) Exiting the controller mode and back to browser controls can be triggered by holding the start button for 3 seconds. (official name "menu button" the three lines)**

# changelog
changelogs:
  - {date: "28.01.24:", desc: "Skip IPFS config if DISABLE_IPFS is set as env variable."}
  - {date: "27.01.24:", desc: "Add atari5200 support."}
  - {date: "24.01.24:", desc: "Pin node back on aarch64 as well for compatibility."}
  - {date: "23.01.24:", desc: "Add logic to symlink out RO rom directories to support upgrades."}
  - {date: "14.01.24:", desc: "Update remaining cores for melonds and yabause threaded to fix audio issues."}
  - {date: "11.01.24:", desc: "Use Node 16 on x86 image to restore metadata uploads in backend, update psx core to current."}
  - {date: "07.01.24:", desc: "Update to use new Mupen64 plus core by default."}
  - {date: "06.01.24:", desc: "Update many emulators to fix audio issues and use latest codebases."}
  - {date: "29.12.23:", desc: "Rebase to Alpine 3.19, add option to launch without IPFS."}
  - {date: "09.08.23:", desc: "Rebase to Alpine 3.18, migrate to s6v3."}
  - {date: "06.07.23:", desc: "Deprecate armhf. As announced [here](https://www.linuxserver.io/blog/a-farewell-to-arm-hf)"}
  - {date: "24.11.22:", desc: "Update IPFS links for chdman."}
  - {date: "04.04.22:", desc: "Ingest pre-built chdman bins during build time."}
  - {date: "23.02.22:", desc: "Update ingestion point for emulatorjs bins."}
  - {date: "25.01.22:", desc: "Allow users to mount in existing rom directories."}
  - {date: "14.01.22:", desc: "Add profile paths and rebase to Alpine 3.15."}
  - {date: "04.01.22:", desc: "Add headers needed for Threaded emulators."}
  - {date: "29.11.21:", desc: "Add wasm mime type to NGINX."}
  - {date: "26.11.21:", desc: "Configure IPFS in a lower power mode, use homebuilt blobs for emu cores."}
  - {date: "19.11.21:", desc: "Pin retroarch version."}
  - {date: "14.11.21:", desc: "Update default cores to ingest."}
  - {date: "23.10.21:", desc: "Initial release."}
